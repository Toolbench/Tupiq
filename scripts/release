#!/usr/bin/env node

var npm = require('npm'),
	fs = require('fs'),
	archiver = require('archiver'),
	rimraf = require('rimraf'),
	mkdirp = require('mkdirp'),
	releaseDir = __dirname + '/../releases';

var release = process.argv[2];

if (release !== 'patch' && release !== 'minor' && release !== 'major') {
	console.log('Invalid release type. Please supply either patch, minor, or major.');
	return;
}

npm.load(function (err, npm) {
	npm.config.set('git-tag-version', false);

	npm.commands.version([release], function (err) {
		if (err) {
			console.log(err);
		} else {
			var packageJSON = require('../package.json');
			var targetVersion = packageJSON.version;

			// Start off by updating bin's version of manifest.json
			updateManifest(targetVersion, function(err, manifestJSON) {
				if (err) {
					console.log(err);
				} else {
					console.log('manifest.json updated.');

					// Remove current release directory
					rimraf(releaseDir, function(err) {
						if (err) {
							console.log(err);
						} else {

							// Make new release directory
							mkdirp(releaseDir, function(err) {
								if (err) {
									console.log(err);
								} else {
									// Now zip up the release
									doPackage(targetVersion, manifestJSON, function(err) {
										if (err) {
											console.log(err);
										} else {
											console.log('Release ' + targetVersion + ' has been zipped.');

											console.log('Release ' + targetVersion + ' is ready for commit, tag, and push!');
										}
									});
								}
							});
						}
					});
				}
			});
		}
	});
});

function updateManifest(version, callback) {
	console.log('Updating manifest.json to version ' + version + '...');

	var manifestJSON = require('../bin/manifest.json');

	// Bump the manifest version
	manifestJSON.version = version;

	// Save it to bin
	fs.writeFile('./bin/manifest.json', JSON.stringify(manifestJSON, null, 4), function(err) {
	    if(err) {
	      callback(err);
	    } else {
	      callback(null, manifestJSON);
	    }
	});
}


function doPackage(version, manifestJSON, callback) {
	console.log('Zipping...');

	var output = fs.createWriteStream(releaseDir + '/' + version + '.zip');
	var archive = archiver('zip');

	output.on('close', function() {
		callback(null);
	});

	archive.on('error', function(err) {
		callback(err);
	});

	archive.pipe(output);

	// Grab contents from bin but exclude manifest as we'll write our own
	archive.bulk([
		{
			expand: true,
			cwd: 'bin',
			src: ['**'],
			filter: function (filePath) {
				return filePath !== 'bin/manifest.json' && filePath !== 'bin/js/bundle.js';
			}
		}
	]);

	// Delete the extension key which is only used for local dev
	// The key for production which will get added automagically via the Chrome Web Store is:
	// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmQLlJ04mcTm33+ZIn//p1jN/786fZogVew4yL1keA82xLnB4aK0i5bl8ZhueRf8EtvAer8TZ3w6nbTRbINrkPe8Ml/+wfIr7oikWKSiCYTooj5Ree/l9ixrR7URru1RyfU4E2zX0f/2F1lIoqaphvpWwZJbjOBsmUybHy3drh/con0SyFJl50PgefvtCP2WWmD82sOK2QTSMsCObA0gvUoJBxr6ah/pQadiICcwX9DH0ij4LyPx2CEbZoJXqdVJ6f3TJCJL/6IcXxEzRhaXRtNMKcw5t7xgbWZVBBJVLI6MAZ9KKYsaTUAQQee0pWqFKOGV09FZ+1azmDCJWhxJ+RQIDAQAB
	delete manifestJSON['key'];

	// Update the name
	manifestJSON.name = 'Tupiq';

	// Add the production Google API ID
	manifestJSON.oauth2.client_id = '51141367093-4sc06mfr2u50apnhhpaooterd3nk7rbo.apps.googleusercontent.com';

	// Append the shiny new manifest
	archive.append(JSON.stringify(manifestJSON, null, 4), { name:'manifest.json' });

	archive.finalize();
}
